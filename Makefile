# Appel support.jar
SUPPORT ?= support.jar

# Compiler step (used for JAR name, and shell script name)
COMPILER_STEP := compile
# Compiler phase (used for submission JAR name)
COMPILER_PHASE := phase12

# Shell scripts for compiler
SH_SCRIPTS := $(COMPILER_STEP) assemble

# Tools
JAVAC ?= javac
JAVACC ?= javacc/bin/javacc
JAR ?= jar
GCC ?= sparc-linux-gcc

# Java package for JavaCC autogenerated source files
JAVACC_PAK := parse/javacc

# Java source
JAVA_SRC_DIRS := main parse check translate codegen codegen/arch/sparc regalloc optimize write
JAVA_SRC_FILES := $(JAVA_SRC_DIRS:=/*.java) parse/*.jj
JAVA_CLS_FILES := $(JAVA_SRC_DIRS:=/*.class) parse/javacc/*.class

# Runtime (C) source
C_RUNTIME_DIR := runtime
C_RUNTIME_SRC := $(C_RUNTIME_DIR)/runtime.c
C_RUNTIME_H := $(C_RUNTIME_DIR)/types.h $(C_RUNTIME_DIR)/runtime.h
C_RUNTIME_FILES := $(C_RUNTIME_SRC) $(C_RUNTIME_H)
C_RUNTIME_O := $(C_RUNTIME_SRC:.c=.o)

# My custom test cases
MY_TEST_CASES := Test.java tests/ArrayTest.java tests/DefUseTest.java tests/IROptimizerTest.java

default: parser compiler 

# Create JavaCC parser Java source files
parser:
	mkdir -p $(JAVACC_PAK)
	$(JAVACC) -STATIC=false -OUTPUT_DIRECTORY=$(JAVACC_PAK) parse/scanner.jj

# Create everything related to the compiler
compiler: $(COMPILER_STEP).jar
# Mark all shell scripts as executable
	$(foreach SCRIPT, $(SH_SCRIPTS), \
		chmod u+x $(SCRIPT); \
	)
# Compile C runtime
	$(GCC) -Wall -Iruntime -c $(C_RUNTIME_SRC) -o $(C_RUNTIME_O)

# Create compiler step JAR file
$(COMPILER_STEP).jar:
	$(foreach DIR, $(JAVA_SRC_DIRS), \
		$(JAVAC) -classpath ".:$(SUPPORT)" $(DIR)/*.java; \
	)

	$(JAR) -cvfm $(COMPILER_STEP).jar MANIFEST.txt $(JAVA_CLS_FILES)

# Create submission (phaseXX.jar) JAR file
$(COMPILER_PHASE).jar:
	$(JAR) -cvf $(COMPILER_PHASE).jar MANIFEST.txt README.txt Makefile $(JAVA_SRC_FILES) $(SH_SCRIPTS) $(C_RUNTIME_FILES) $(MY_TEST_CASES)

# Remove build artifacts
clean:
	-/bin/rm parse/javacc/*.*
	-/bin/rm */*.class
	-/bin/rm $(COMPILER_PHASE).jar
	-/bin/rm tests/*.s
	-/bin/rm runtime/*.o